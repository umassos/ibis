# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import backend_service_pb2 as backend__service__pb2


class BackEndServiceStub(object):
    """The BackEnd Service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InfereImage = channel.unary_unary(
                '/BackEndService/InfereImage',
                request_serializer=backend__service__pb2.GPURequest.SerializeToString,
                response_deserializer=backend__service__pb2.GPUResponse.FromString,
                )


class BackEndServiceServicer(object):
    """The BackEnd Service definition.
    """

    def InfereImage(self, request, context):
        """Send an Inference Request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackEndServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InfereImage': grpc.unary_unary_rpc_method_handler(
                    servicer.InfereImage,
                    request_deserializer=backend__service__pb2.GPURequest.FromString,
                    response_serializer=backend__service__pb2.GPUResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BackEndService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackEndService(object):
    """The BackEnd Service definition.
    """

    @staticmethod
    def InfereImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BackEndService/InfereImage',
            backend__service__pb2.GPURequest.SerializeToString,
            backend__service__pb2.GPUResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
